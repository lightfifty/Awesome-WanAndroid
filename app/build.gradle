apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
apply plugin: 'android-aspectjx'
apply from: 'jacoco.gradle'
apply plugin: 'me.ele.lancet'

// apply ByteX宿主
apply plugin: 'bytex'
ByteX {
    enable true
    enableInDebug false
    logLevel "DEBUG"
}

// 按需apply bytex 插件
apply plugin: 'bytex.access_inline'
access_inline {
    enable true
    enableInDebug false
    logLevel "DEBUG"
}

apply plugin: 'AndResGuard'
andResGuard {
    // mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    use7zip = true
    useSign = true
    // 打开这个开关，会keep住所有资源的原始路径，只混淆资源的名字
    keepRoot = false
    // 设置这个值，会把arsc name列混淆成相同的名字，减少string常量池的大小
    fixedResName = "arg"
    // 打开这个开关会合并所有哈希值相同的资源，但请不要过度依赖这个功能去除冗余资源
    mergeDuplicatedRes = true
    whiteList = [
            // for your icon
            "R.drawable.icon",
            // for fabric
            "R.string.com.crashlytics.*",
            // for google-services
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key"
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
            "resources.arsc"
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.17'
        //path = "/usr/local/bin/7za"
    }

    /**
     * 可选： 如果不设置则会默认覆盖assemble输出的apk
     **/
    // finalApkBackupPath = "${project.rootDir}/final.apk"

    /**
     * 可选: 指定v1签名时生成jar文件的摘要算法
     * 默认值为“SHA-1”
     **/
    // digestalg = "SHA-256"
}

apply plugin: 'com.didichuxing.tools.droidassist'
droidAssistOptions {
    // 插件配置文件(必选配置,支持多配置文件)
    config file("droidassist.xml")
    // 如果需要停用 DroidAssist 插件功能，可以添加 enable false 以停用插件 (可选配置)
    enable true
    // 日志输出等级：0 关闭日志输出，1 输出日志到控制台 2 输出日志到文件 3 输出日志到控制台以及日志 (可选配置)
    logLevel 1
    // 日志输出目录，当日志输出到文件时，默认的输出目录是当前 model 的 build/outputs/logs 目录 (可选配置)
    // logDir
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }
    defaultConfig {
        applicationId "json.chao.com.wanandroid"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        //AndroidJunitRunner必须要显示指定在defaultConfig中，使用Gradle依赖管理无法使其生效
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        renderscriptTargetApi rootProject.ext.android["renderscriptTargetApi"]
        renderscriptSupportModeEnabled true    // Enable RS support
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
//        ndk {
//            abiFilters "armeabi-v7a" //选择要使用的平台
//        }
        resConfigs "zh", "zh-rCN"
    }

    buildTypes {
        release {
            // 是否进行混淆
            minifyEnabled true
            // 开启zipAlign可以让安装包中的资源按4字节对齐，这样可以减少应用在运行时的内存消耗
            zipAlignEnabled true
            // 移除无用的resource文件
            // 需要注意的是目前资源压缩器目前不会移除values/文件夹中定义的资源（例如字符串、尺寸、样式和颜色）
            shrinkResources true
            // 混淆文件的位置，其中 proguard-android.txt 为sdk默认的混淆配置，
            // 它的位置位于android-sdk/tools/proguard/proguard-android.txt，
            // 此外，proguard-android-optimize.txt 也为sdk默认的混淆配置，
            // 但    是它默认打开了优化开关，我们可在配置混淆文件将android.util.Log置为无效代码，
            // 以去除apk中打印日志的代码。而 proguard-rules.pro 是该模块下的混淆配置。
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
//            signingConfig signingConfigs.release
        }
    }

    testOptions {
        unitTests {
            // Fix unit test resources not included with AS3
            includeAndroidResources = true
        }
    }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        flavorDimensions "code"
        productFlavors {
        }

        packagingOptions {
            exclude 'META-INF/services/javax.annotation.processing.Processor'
        }

        dexOptions {
            jumboMode true
            javaMaxHeapSize "4g"
        }
}

    greendao {
        schemaVersion 1
        targetGenDir 'src/main/java'
        daoPackage 'json.chao.com.wanandroid.core.dao'
    }

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //base
    implementation rootProject.ext.dependencies["appcompat-v7"]
    implementation rootProject.ext.dependencies["cardview-v7"]
    implementation rootProject.ext.dependencies["design"]
    implementation rootProject.ext.dependencies["constraint-layout"]

    //ui
    implementation rootProject.ext.dependencies["SmartRefreshLayout"]
    implementation rootProject.ext.dependencies["SmartRefreshHeader"]
    implementation rootProject.ext.dependencies["banner"]
    implementation rootProject.ext.dependencies["FlycoTabLayout_Lib"]
    implementation rootProject.ext.dependencies["VerticalTabLayout"]
    implementation rootProject.ext.dependencies["flowlayout-lib"]
    implementation rootProject.ext.dependencies["agentweb"]

    //net
    implementation rootProject.ext.dependencies["gson"]
    implementation rootProject.ext.dependencies["okhttp"]
    implementation rootProject.ext.dependencies["logging-interceptor"]
    implementation rootProject.ext.dependencies["retrofit"]
    implementation rootProject.ext.dependencies["converter-gson"]
    implementation rootProject.ext.dependencies["adapter-rxjava2"]
    implementation rootProject.ext.dependencies["glide"]
    annotationProcessor rootProject.ext.dependencies["glide_compiler"]
    implementation rootProject.ext.dependencies["retrofit-url-manager"]

    //dao
    implementation rootProject.ext.dependencies["greendao"]

    //rx
    implementation rootProject.ext.dependencies["rxjava"]
    implementation rootProject.ext.dependencies["rxandroid"]
    implementation rootProject.ext.dependencies["rxbinding"]
    implementation rootProject.ext.dependencies["rxpermissions"]

    //di
    implementation rootProject.ext.dependencies["dagger"]
    annotationProcessor rootProject.ext.dependencies["dagger-compiler"]
    implementation rootProject.ext.dependencies["dagger-android"]
    implementation rootProject.ext.dependencies["dagger-android-support"]
    annotationProcessor rootProject.ext.dependencies["dagger-android-processor"]
    implementation rootProject.ext.dependencies["javax_annotation"]
    implementation rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]

    //multidex
    implementation rootProject.ext.dependencies["multidex"]

    //canary
    debugImplementation (rootProject.ext.dependencies["leakcanary-android"]) {
        exclude group: 'com.android.support'
    }
    releaseImplementation (rootProject.ext.dependencies["leakcanary-android-no-op"]) {
        exclude group: 'com.android.support'

    }
    testImplementation (rootProject.ext.dependencies["leakcanary-android-no-op"]) {
        exclude group: 'com.android.support'
    }

    //other
    implementation rootProject.ext.dependencies["lottie"]
    implementation rootProject.ext.dependencies["BaseRecyclerViewAdapterHelper"]
    implementation rootProject.ext.dependencies["fragmentation"]
    implementation rootProject.ext.dependencies["fragmentation-swipeback"]
    implementation rootProject.ext.dependencies["crashreport_upgrade"]
    implementation rootProject.ext.dependencies["logger"]
    implementation rootProject.ext.dependencies["ByeBurger"]
    implementation rootProject.ext.dependencies["stetho"]
    implementation rootProject.ext.dependencies["stetho-okhttp3"]
    implementation rootProject.ext.dependencies["PersistentCookieJar"]
    implementation rootProject.ext.dependencies["XUpdate"]

    //UI测试
    androidTestImplementation(rootProject.ext.dependencies["espresso-core"]) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation(rootProject.ext.dependencies["espresso-idling-resource"]) {
        exclude module: 'support-annotations'
    }
    androidTestImplementation rootProject.ext.dependencies["espresso-contrib"]
    androidTestImplementation rootProject.ext.dependencies["espresso-intents"]
    androidTestImplementation rootProject.ext.dependencies["espresso-accessibility"]
    androidTestImplementation rootProject.ext.dependencies["espresso-web"]
    androidTestImplementation rootProject.ext.dependencies["idling-concurrent"]

    //unit test
    testImplementation rootProject.ext.dependencies["junit"]
    testImplementation rootProject.ext.dependencies["mockito"]
    testImplementation rootProject.ext.dependencies["powermock-module-junit4"]
    testImplementation rootProject.ext.dependencies["powermock-module-junit4-rule"]
    testImplementation rootProject.ext.dependencies["powermock-api-mockito2"]

    //注意这里是mockito2
    testImplementation rootProject.ext.dependencies["powermock-classloading-xstream"]
    testImplementation rootProject.ext.dependencies["robolectric"]
    testImplementation rootProject.ext.dependencies["shadows-support-v4"]
    testImplementation rootProject.ext.dependencies["shadows-multidex"]

    //支持Multidex功能
    androidTestImplementation rootProject.ext.dependencies["runner"]

    // 性能优化使用到的库
    implementation 'me.weishu:epic:0.6.0'

    implementation 'org.aspectj:aspectjrt:1.8.14'

    annotationProcessor 'com.zhangyue.we:x2c-apt:1.1.2'
    implementation 'com.zhangyue.we:x2c-lib:1.0.6'

    testImplementation 'org.ow2.asm:asm:7.1'
    testImplementation 'org.ow2.asm:asm-commons:7.1'

    // release：项目中实现了线上监控体系的时候去使用
//    api 'com.github.markzhai:blockcanary-android:1.5.0'

    // 仅在debug包启用BlockCanary进行卡顿监控和提示的话，可以这么用
    debugApi 'com.github.markzhai:blockcanary-android:1.5.0'
    releaseApi 'com.github.markzhai:blockcanary-no-op:1.5.0'

    implementation 'com.github.anrwatchdog:anrwatchdog:1.4.0'

    compileOnly 'me.ele:lancet-base:1.0.5'

    // debug模式耗时方法排查工具，支持线上预览
    debugImplementation 'com.github.zhengcx:MethodTraceMan:1.0.7'
    releaseImplementation 'com.github.zhengcx:MethodTraceMan:1.0.5-noop'

    implementation 'com.facebook.soloader:soloader:0.8.0'

    // 启动器
    api files('libs/launchstarter-release-1.0.0.aar')



}

//解决支持库版本不兼容问题
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '26.1.0'
            }
        }
    }
}
repositories {
    mavenCentral()
}